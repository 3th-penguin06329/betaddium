plugins {
    id 'java-library'
    id 'maven-publish'
}

version = "1.0.0"

repositories {
    maven {
        // RetroFuturaGradle
        name "GTNH Maven"
        url "https://nexus.gtnewhorizons.com/repository/public/"
        mavenContent {
            includeGroup("com.gtnewhorizons")
            includeGroupByRegex("com\\.gtnewhorizons\\..+")
        }
    }
    maven {
        url "https://libraries.minecraft.net/"
    }
}

dynamicProject {
    runtime("${project.minecraft_version}-${project.neoform_version}",
            project.layout.projectDirectory.dir('patches'),
            project.layout.projectDirectory.dir('rejects'))
}

sourceSets {
    main {
        java {
            srcDirs project.file("stubSrc")
        }
    }
}

configurations {
    instanceJarEmbedded {
        canBeConsumed = false
        canBeResolved = true
    }
    instanceJar {
        canBeConsumed = true
        canBeResolved = false
    }
    implementation.extendsFrom(instanceJarEmbedded)
}

dependencies {
    api "org.ow2.asm:asm:${project.asm_version}"
    api "org.ow2.asm:asm-commons:${project.asm_version}"
    api "org.ow2.asm:asm-tree:${project.asm_version}"
    api "org.ow2.asm:asm-util:${project.asm_version}"
    api "org.ow2.asm:asm-analysis:${project.asm_version}"

    api("net.fabricmc:sponge-mixin:${project.mixin_version}") { transitive = false }
    api("net.neoforged:bus:${project.eventbus_version}")
    api("io.github.llamalad7:mixinextras-common:${project.mixin_extras_version}")

    api("org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}")
    api("net.neoforged:neoforgespi:${project.spi_version}")
    api("cpw.mods:modlauncher:${project.modlauncher_version}")

    instanceJarEmbedded("com.gtnewhorizons.retrofuturabootstrap:RetroFuturaBootstrap:1.0.2") {
        transitive = false
    }
}

runTypes {
    client {
        singleInstance false
        client true

        mainClass "org.embeddedt.phi.PhiBootstrap"

        jvmArguments.set(["-Djava.system.class.loader=com.gtnewhorizons.retrofuturabootstrap.RfbSystemClassLoader"])

        arguments.addAll '--embeddiumVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }
}

runs {
    client {}
}

runs.configureEach { it ->
    final File gameDir = project.file("run/${it.name}") as File
    gameDir.mkdirs();

    it.workingDirectory.set gameDir
    it.programArguments.addAll '--gameDir', gameDir.absolutePath
}

installerProfile {
    profile = 'EmbeddiumPhi'
}

minecraft {
    accessTransformers {
        file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

tasks.withType(GenerateModuleMetadata).configureEach { enabled = false }

tasks.register("mmcInstanceJar", Jar) {
    dependsOn "universalJar"
    archiveClassifier.set("mmc-instance")
    from(zipTree(tasks.named("universalJar").get().outputs.files.singleFile))
    from(tasks.named("generateClientBinaryPatches")) {
        into("data")
        rename { "client.lzma" }
    }
    configurations.instanceJarEmbedded.resolve().forEach { dep ->
        from(zipTree(dep)) {
            filesMatching("META-INF/*") {
                this.name = "${dep.name}-${this.name}"
            }
        }
    }
    manifest {
        attributes (
            "Multi-Release": "true"
        )
    }
}



artifacts {
    instanceJar(tasks.named("mmcInstanceJar"))
}

minecraft {
    modIdentifier 'minecraft'
}