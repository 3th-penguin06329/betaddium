plugins {
	id 'idea'
	id 'net.neoforged.gradle' version '6.0.21'
	id 'maven-publish'
	id 'org.spongepowered.mixin' version '0.7.38'

	// This dependency is only used to determine the state of the Git working tree so that build artifacts can be
	// more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
	id 'org.ajoberstar.grgit' version '5.0.0'

	id "me.modmuss50.mod-publish-plugin" version "0.3.4"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "${project.mod_version}${getVersionMetadata()}+mc${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
	compat {
		java {
			compileClasspath += main.compileClasspath
			compileClasspath += main.output
		}
	}

	main {
		java {
			runtimeClasspath += compat.output
		}
	}
}

repositories {
	maven {
		name "Forge maven"
		url "https://maven.minecraftforge.net/"
	}
	maven {
		name "Fabric maven"
		url "https://maven.fabricmc.net"
	}
    maven {
        name "Flywheel maven"
        url "https://maven.tterrag.com/"
    }
    maven {
        name "Immersive Engineering maven"
        url "https://maven.blamejared.com"
    }
	maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}


minecraft {
	mappings channel: "official", version: project.minecraft_version
	copyIdeResources = true
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	runs {
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.console.level', 'info'

			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods {
				embeddium {
					source sourceSets.main
					source sourceSets.compat
				}
			}
		}

		client {}
	}
}

configurations {
	create("runtimeOnlyNonPublishable") {
		description = "Runtime only dependencies that are not published alongside the jar"
		canBeConsumed = false
		canBeResolved = false
	}
	runtimeClasspath.extendsFrom(runtimeOnlyNonPublishable)
}

def extraModsDir = "extra-mods-${project.minecraft_version}"

repositories {
	exclusiveContent {
		forRepository {
			flatDir {
				name "extra-mods"
				dir file(extraModsDir)
			}
		}
		filter {
			includeGroup "extra-mods"
		}
	}
}

mixin {
	// MixinGradle Settings
	add sourceSets.main, 'embeddium-refmap.json'
	config 'embeddium.mixins.json'
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

	compatCompileOnly fg.deobf("com.jozufozu.flywheel:Flywheel-Forge:1.18-0.6.0.53")
	compatCompileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:1.18.2-8.0.2-149")
	compatCompileOnly fg.deobf("curse.maven:codechickenlib-242818:4607274")

	runtimeOnlyNonPublishable fg.deobf("curse.maven:lazydfu-460819:3544496")

	// runtime remapping at home
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}


java {
	withSourcesJar()
}

tasks.named('jar', Jar).configure {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	from sourceSets.compat.output.classesDirs
	from sourceSets.compat.output.resourcesDir

	finalizedBy 'reobfJar'
}

tasks.named('sourcesJar', Jar).configure {
	from(sourceSets.compat.allJava)
}

def copyJarNameConsistent = tasks.register('copyJarNameConsistent', Copy) {
	from jar // shortcut for createJar.outputs.files
	into project.file("build/libs")
	rename { name -> "embeddium-latest.jar" }
}

def copyJarToBin = tasks.register('copyJarToBin', Copy) {
	from jar // shortcut for createJar.outputs.files
	into rootProject.file("bin")
	mustRunAfter "copyJarNameConsistent"
}

tasks.build.dependsOn(copyJarToBin, copyJarNameConsistent)

publishing {
	tasks.publish.dependsOn 'build'
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourcesJar
		}
	}

	repositories {
		maven {
			url "file://${System.getenv("local_maven")}"
		}
	}
}

publishMods {
	file = jar.archiveFile
	changelog = "https://github.com/embeddedt/embeddium/wiki/Changelog"
	type = STABLE
	modLoaders.add("forge")

	curseforge {
		projectId = "908741"
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}
	modrinth {
		projectId = "sk9rgfiA"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}

	displayName = "[${project.minecraft_version}] Embeddium ${project.mod_version}"
}

def getVersionMetadata() {
	// CI builds only
	if (project.hasProperty("build.release")) {
		return "" // no tag whatsoever
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += ".dirty"
		}

		return "-git.${id}"
	}

	// No tracking information could be found about the build
	return "-unknown"
}
