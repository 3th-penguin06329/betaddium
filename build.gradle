plugins {
	id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
	id 'maven-publish'

    // This dependency is only used to determine the state of the Git working tree so that build artifacts can be
    // more easily identified. TODO: Lazily load GrGit via a service only when builds are performed.
    id 'org.ajoberstar.grgit' version '5.0.0'

	id "me.modmuss50.mod-publish-plugin" version "0.3.4"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "${project.mod_version}${getVersionMetadata()}+mc${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }

    legacy {
        java {
            compileClasspath += main.compileClasspath
            compileClasspath += main.output
        }
    }

    compat {
        java {
            compileClasspath += main.compileClasspath
            compileClasspath += main.output
        }
    }
}

repositories {
    maven {
        name "Flywheel maven"
        url "https://maven.tterrag.com/"
    }
    maven {
        name "Immersive Engineering maven"
        url "https://maven.blamejared.com"
    }
	maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}


minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
runs {
    configureEach {

        systemProperty 'forge.logging.console.level', 'info'

        modSource sourceSets.main
        modSource sourceSets.compat
        modSource sourceSets.api
        modSource sourceSets.legacy
    }

    client {}
}

configurations {
	create("runtimeOnlyNonPublishable") {
		description = "Runtime only dependencies that are not published alongside the jar"
		canBeConsumed = false
		canBeResolved = false
	}
	runtimeClasspath.extendsFrom(runtimeOnlyNonPublishable)
}

def extraModsDir = "extra-mods-${project.minecraft_version}"

repositories {
	exclusiveContent {
		forRepository {
			flatDir {
				name "extra-mods"
				dir file(extraModsDir)
			}
		}
		filter {
			includeGroup "extra-mods"
		}
	}
}

dependencies {
    implementation "net.neoforged:neoforge:${forge_version}"

    // Mods
    compatCompileOnly "curse.maven:codechickenlib-242818:${codechicken_fileid}"
    compatCompileOnly "curse.maven:immersiveengineering-231951:${ie_fileid}"

	// runtime remapping at home
	for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
		def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
		def versionSep = basename.lastIndexOf('-')
		assert versionSep != -1
		def artifactId = basename.substring(0, versionSep)
		def version = basename.substring(versionSep + 1)
		runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}


java {
	withSourcesJar()
}

tasks.named('jar', Jar).configure {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
	from sourceSets.compat.output.classesDirs
	from sourceSets.compat.output.resourcesDir
}

tasks.named('sourcesJar', Jar).configure {
    from(sourceSets.compat.allJava)
    from(sourceSets.api.allJava)
    from(sourceSets.legacy.allJava)
}

publishing {
	tasks.publish.dependsOn 'build'
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourcesJar
		}
	}

	repositories {
		maven {
			url "file://${System.getenv("local_maven")}"
		}
	}
}

publishMods {
	file = jar.archiveFile
	changelog = "https://github.com/embeddedt/embeddium/wiki/Changelog"
	type = STABLE
    modLoaders.add("forge")
    modLoaders.add("neoforge")

	curseforge {
		projectId = "908741"
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}
	modrinth {
		projectId = "sk9rgfiA"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(project.minecraft_version)

		incompatible {
			slug = "rubidium"
		}
	}

	displayName = "[${project.minecraft_version}] Embeddium ${project.mod_version}"
}

def getVersionMetadata() {
	// CI builds only
	if (project.hasProperty("build.release")) {
		return "" // no tag whatsoever
	}

	if (grgit != null) {
		def head = grgit.head()
		def id = head.abbreviatedId

		// Flag the build if the build tree is not clean
		if (!grgit.status().clean) {
			id += ".dirty"
		}

		return "-git.${id}"
	}

	// No tracking information could be found about the build
	return "-unknown"
}
